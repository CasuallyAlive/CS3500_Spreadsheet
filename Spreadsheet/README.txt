Author: Jordy A. Larrea Rodriguez (U1236145) - SpreadSheetGUI(C#) Version 3.4 03/18/2021

Version History (oldest first)
================================
PS6: V1.1 (03/14/2020) - implemented the intitial stages of the ps6 gui, i.e. the input strategy to set cells (used a textbox that is placed on the location of the clicked cell alongside the enter key).
Added the components necessary for ps6.

PS6: V1.2 (03/16/2020) - "Correctly" implemented the extra feature for this spreadsheet GUI. The Textbox can now shift throughout the grid with minimal graphical bugs. Strings typed in the textbox are now registered in the spreadsheet class and are displayed.

PS6: V2.1 (03/16/2020) - Substantial update. New GUI elements added such as a strip-menu, and textbox/button for choosing manipulating cell values aside from the more direct click on cell functionality (still need to program logic). Strip-menu supports saving and opening to and from a file respectively; furthermore, a user can now open new spreadsheet windows and close a window through said menu. The aforementioned features display appropriate messageboxes when prompted.

PS6: V3.1 (03/17/2020) - Implemented core functionality to it's entirety,i.e. Spreadsheet is all up to specifications except for the new spreadsheet feature which needs to be tuned such that closing the main form does not close child forms.

PS6: V3.2 (03/17/2020) - New windows are now independent of each other, i.e. closing the initial form won't terminate the entire program. Fixed minor GUI bugs such as the wrong file being displayed after saving and implemented the overwrite prompt whenever a save would overwrite an already existing file.

PS6: V3.3 (03/18/2020) - Replaced Input-boxes that were previously used in open/save features with an actual FileDialog control in order to more precisely meet spreadsheet specifications.

PS6: V3.3.1 (03/18/2020) - Displayed cell values are now rounded to 9 decimal points.

PS6: V3.4 (03/18/2020) - Spreadsheet is now "ready to ship", implemented textbox selection alternatives via the four arrow keys and the enter/tab keys in order to improve the UI. Added help messages to the menu. 
================================

Useful Information:
================================

-Selection Details: A cell can be selected directly by one of two ways: by clicking on the cell or by pressing on the arrow keys when focused on another cell.
                    (left key - select left,right key - select right, up key - select above, down key - select below)
                    In this spreadsheet cells are automatically selected whenever either "enter" or "tab" keys are pressed while focused on a cell with the former causing the cell below the current cell to be selected while the latter causes the cell to the immediate
                    right of the current cell to be selected. *NOTE* The "left" and "right" keys will not change selection if the contents of the cell are being edited."

-Editing Details:  A cell can be edited by one of two ways: directly on a text field on the cell or via a textbox located in the upper left corner. Any selection on a cell will automatically place the previous contents of the cell on the respective textboxes. Simply provide input and press any of the selection-specific keys to set the value of the cell if the first method is used; otherwise, press the button labeled "Enter" located to the right of the textbox.

-Formula Details: Formulas can be generated by starting an input string with the "=" character. *Note* Formulas with improper syntax or Cycles will result in an error and the Formula will be destroyed.

-Extra Feature: The special feature I came up with is essentially an interactable and dynamic textbox that appears whenever you, the user, select a cell. The cell exists as a property in the embedded class, DrawingPanel, in SpreadsheetPanel. I used events and normal methods to allow communication between the panel and the main spreadsheet form which took much longer than I expected due to the textbox having to be updated constantly whenever required by the spreadsheet form or the redraw mechanism of the panel.

References and Final Remarks
================================

I didn't really copy code from any source; however, a lot of research was done throughout the extent of the project using sites such as StackOverFlow etc. I made the mistake of designing my extra feature at the start rather than focusing on core-functionality leading to more headaches than necessary.